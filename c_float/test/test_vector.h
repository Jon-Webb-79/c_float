// ================================================================================
// ================================================================================
// - File:    test.h
// - Purpose: Describe the file purpose here
//
// Source Metadata
// - Author:  Jonathan A. Webb
// - Date:    August 31, 2022
// - Version: 1.0
// - Copyright: Copyright 2022, Jon Webb Inc.
// ================================================================================
// ================================================================================
// Include modules here

#ifndef test_flt_struct_H
#define test_flt_struct_H

#include <stdio.h>
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdint.h>
#include <cmocka.h>
// ================================================================================ 
// ================================================================================ 

void test_init_float_vector_success(void **state);
// --------------------------------------------------------------------------------

void test_init_float_vector_zero_size(void **state);
// -------------------------------------------------------------------------------- 

void test_init_float_array_success(void **state);
// --------------------------------------------------------------------------------

void test_free_float_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_free_float_vector_static(void **state);
// -------------------------------------------------------------------------------- 

#if defined(__GNUC__) || defined(__clang__)
    void test_float_vector_gbc(void **state);
#endif
// ================================================================================ 
// ================================================================================ 

void test_push_back_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_static(void **state);
// -------------------------------------------------------------------------------- 

void test_generic_macros(void **state);
// -------------------------------------------------------------------------------- 

void test_float_vector_index(void **state);
// -------------------------------------------------------------------------------- 

void test_push_back_special_values(void **state);
// --------------------------------------------------------------------------------

void test_static_array_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_index_bounds(void **state);
// --------------------------------------------------------------------------------

void test_static_array_initialization(void **state);
// -------------------------------------------------------------------------------- 

void test_static_array_free(void **state);
// ================================================================================ 
// ================================================================================ 

void test_push_front_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_static(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_push_front_error_cases(void **state);
// ================================================================================ 
// ================================================================================ 

void test_insert_vector_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_vector_growth(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_array_bounds(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_error_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_insert_special_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_back_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_empty(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_errors(void **state);
// --------------------------------------------------------------------------------

void test_pop_back_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_back_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_front_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_empty(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_front_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_pop_any_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_static(void **state);
// -------------------------------------------------------------------------------- 

void test_pop_any_special_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_reverse_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_static(void **state);
// -------------------------------------------------------------------------------- 

void test_reverse_special_values(void **state);
// ================================================================================ 
// ================================================================================ 

void test_sort_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_edge_cases(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_duplicates(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_static_array(void **state);
// -------------------------------------------------------------------------------- 

void test_sort_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_trim_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_empty_vector(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_static_array(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_already_optimal(void **state);
// -------------------------------------------------------------------------------- 

void test_trim_errors(void **state);
// ================================================================================ 
// ================================================================================ 

void test_binary_search_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_tolerance(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_with_sort(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_errors(void **state);
// -------------------------------------------------------------------------------- 

void test_binary_search_static(void **state);
// ================================================================================ 
// ================================================================================ 

void test_update_float_vector_nominal(void **state);
// -------------------------------------------------------------------------------- 

void test_update_float_vector_null(void **state);
// -------------------------------------------------------------------------------- 

void test_update_float_vector_bad_index(void **state);
// ================================================================================ 
// ================================================================================ 

void test_min_float_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_max_float_basic(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_special_values(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_static_array(void **state);
// -------------------------------------------------------------------------------- 

void test_min_max_errors(void **state);
// ================================================================================ 
// ================================================================================ 
#endif /* test_H */
// ================================================================================
// ================================================================================
// eof
